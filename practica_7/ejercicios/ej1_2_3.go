package practica

import (
	"fmt"

	"github.com/labora/labora-golang/practica_3/ejercicios"
	"github.com/labora/labora-golang/util"
)

func rollATriangularDice() int {
	return util.GenerateRandomNumber(0, 2)
}

type IntSequence interface {
	Next() int
	Title() string
	Fulfill(n int) bool
}

type LinealIntSequence struct {
	last int
}

func (s *LinealIntSequence) Next() int {
	s.last++
	return s.last
}

func (s *LinealIntSequence) Title() string {
	return "Secuencia lineal de n√∫meros enteros."
}

func (s *LinealIntSequence) Fulfill(n int) bool {
	return true
}

type PrimeSequence struct {
	last int
}

func (s *PrimeSequence) Next() int {
	newPrimeFounded := false
	for i := s.last + 1; !newPrimeFounded; i++ {
		if s.Fulfill(i) {
			newPrimeFounded = true
			s.last = i
		}
	}
	return s.last
}

func (s *PrimeSequence) Title() string {
	return "Secuencia de n√∫meros primos."
}

func (s *PrimeSequence) Fulfill(n int) bool {
	return practica.IsPrimeNumber(n) || n == 1
}

type EvenSequence struct {
	last int
}

func (s *EvenSequence) Next() int {
	s.last += 2
	return s.last
}

func (s *EvenSequence) Title() string {
	return "Secuencia de n√∫meros pares."
}

func (s *EvenSequence) Fulfill(n int) bool {
	return n%2 == 0
}

func Ej1_2_3() {
	// Se necesita generar dos secuencias de n√∫meros que sigan la siguiente l√≥gica
	// 1. N√∫meros en orden crecientes (del 1 en adelante)
	// 2. N√∫meros que sean primos (1,2,3,5,7,9,11‚Ä¶)
	// Se pide implementar cada secuencia en una struct que siga cumpla con la interfaz
	// type IntSequence interface {
	// 	Next() int
	// }
	// Por √∫ltimo se pide desarrollar un peque√±o programa donde se pueda imprimir los primeros 30 n√∫meros de una de las dos secuencias seg√∫n una ‚Äútirada de dados‚Äù.

	// Tip: Podemos simular una tirada de dado usando rand.Intn(2) (del paquete math/rand).

	// Ahora se desea que se imprima un mensaje que diga cu√°l de las dos secuencias se tom√≥ (seg√∫n la tirada de dados).
	// üí° TIP: Se le puede declarar un m√©todo `Title() string` en la interface `IntSequence` y hacer que ambas secuencias lo implementen.

	// De forma m√°s general se desea tener una secuencia que me d√© n√∫meros que cumplan una condici√≥n (predicado).
	// Dicha condici√≥n ser√° implementada en estructuras (o cualquier otro tipo de dato)¬† que tengan el un m√©todo con la siguiente firma `Fulfill(n int) bool`.
	// Fulfill es un t√©rmino en ingl√©s que com√∫nmente se emplea para afirmar que algo cumple una condici√≥n.
	// Adem√°s de tener tipos de datos que tengan una funci√≥n para implementar condiciones de:
	// N√∫meros cualquier sea (para secuencias de enteros lineales)
	// N√∫meros primos
	// Ahora quiero que agreguen un nuevo tipo que tenga una funci√≥n que implemente la condici√≥n de
	// N√∫meros pares (2,4,6‚Ä¶)
	fmt.Print("EJERCICIO 1, 2 y 3\n\n")

	intSequences := []IntSequence{&LinealIntSequence{}, &PrimeSequence{}, &EvenSequence{}}
	selectedSequence := intSequences[rollATriangularDice()]

	fmt.Println(selectedSequence.Title())
	fmt.Print("[ ")
	for i := 0; i < 30; i++ {
		fmt.Printf("%d ", selectedSequence.Next())
	}
	fmt.Print("]")
}
